import sys
import numpy as np
from PIL import Image
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QLabel, QPushButton, QFileDialog, QTextEdit, QDialog, QComboBox, QMainWindow
)
from PyQt5.QtGui import QFont
from PyQt5.QtCore import Qt

from PyQt5.QtGui import QFont
from PyQt5.QtCore import Qt
import matplotlib.pyplot as plt

# Создание фиктивных данных для обучения
def create_mock_data(classes, img_size):
    X, y = [], []
    for i, class_name in enumerate(classes):
        img = np.zeros((img_size, img_size))
        img[: img_size // (i + 1), : img_size // (i + 1)] = 255  # Уникальный паттерн для каждого класса
        X.append(img.flatten())
        y.append(i)
    return np.array(X), np.array(y)

# Класс для отображения графиков
class GraphWindow(QDialog):
    def __init__(self, img, predicted_proba, classes):
        super().__init__()
        self.setWindowTitle("Analysis Results")
        self.setGeometry(200, 200, 800, 600)
        self.plot_results(img, predicted_proba, classes)

    def plot_results(self, img, predicted_proba, classes):
        plt.figure(figsize=(10, 5))
        
        # Отображаем изображение
        plt.subplot(1, 2, 1)
        plt.imshow(img, cmap='gray')
        plt.title("Input Image")
        plt.colorbar()

        # Отображаем вероятности классов
        plt.subplot(1, 2, 2)
        plt.bar(classes, predicted_proba, color=['blue', 'green', 'orange', 'red'])
        plt.title("Probability Distribution")
        plt.ylabel("Probability")
        plt.ylim(0, 1)
        plt.show()

# Основной интерфейс
class MedicalImageClassifier(QWidget):
    def __init__(self, parent=None):  # Добавлен аргумент parent
        super().__init__(parent)  # Передаем родительский объект в конструктор родительского класса

        self.setWindowTitle("Medical Image Classification")
        self.setGeometry(300, 200, 700, 500)
        self.setStyleSheet("background-color: #f7f8fa;")
        self.layout = QVBoxLayout()

        self.classes = ['glioma', 'healthy', 'meningioma', 'pituitary']
        self.models = {
            'Random Forest': RandomForestClassifier(n_estimators=100, random_state=42),
            'K-Nearest Neighbors': KNeighborsClassifier(n_neighbors=3),
            'Decision Tree': DecisionTreeClassifier(random_state=42)
        }

        self.selected_model = 'Random Forest'
        self.clf = self.models[self.selected_model]
        self.scaler = StandardScaler()
        self.img_size = 64

        # Заголовок
        self.title_label = QLabel("Medical Image Classification")
        self.title_label.setFont(QFont("Arial", 20, QFont.Bold))
        self.title_label.setAlignment(Qt.AlignCenter)
        self.title_label.setStyleSheet("color: #333; margin: 10px 0;")
        self.layout.addWidget(self.title_label)

        # Выпадающий список для выбора модели
        self.model_selector = QComboBox()
        self.model_selector.addItems(self.models.keys())
        self.model_selector.setFont(QFont("Arial", 14))
        self.model_selector.setStyleSheet("margin: 5px 0; padding: 5px;")
        self.model_selector.currentTextChanged.connect(self.change_model)
        self.layout.addWidget(self.model_selector)

        # Кнопка загрузки изображения
        self.upload_button = QPushButton("Upload Image")
        self.upload_button.setFont(QFont("Arial", 14))
        self.upload_button.setStyleSheet("background-color: #4CAF50; color: white; padding: 10px; border-radius: 5px;")
        self.upload_button.clicked.connect(self.load_image)
        self.layout.addWidget(self.upload_button)

        # Результаты классификации
        self.result_text = QTextEdit(self)
        self.result_text.setReadOnly(True)
        self.result_text.setFont(QFont("Arial", 12))
        self.result_text.setStyleSheet("background-color: #ffffff; border: 1px solid #ccc; border-radius: 5px; padding: 10px;")
        self.layout.addWidget(self.result_text)

        # Кнопка для графиков
        self.graph_button = QPushButton("Show Analysis")
        self.graph_button.setFont(QFont("Arial", 14))
        self.graph_button.setStyleSheet("background-color: #2196F3; color: white; padding: 10px; border-radius: 5px;")
        self.graph_button.setEnabled(False)
        self.graph_button.clicked.connect(self.show_graph)
        self.layout.addWidget(self.graph_button)

        # Подготовка данных и обучение модели
        self.prepare_data()
        self.setLayout(self.layout)

    def prepare_data(self):
        X, y = create_mock_data(self.classes, self.img_size)
        X_scaled = self.scaler.fit_transform(X)
        self.clf.fit(X_scaled, y)

    def change_model(self, model_name):
        self.selected_model = model_name
        self.clf = self.models[self.selected_model]
        self.prepare_data()
        self.result_text.setText(f"Model changed to: {model_name}")

    def load_image(self):
        options = QFileDialog.Options()
        self.image_path, _ = QFileDialog.getOpenFileName(self, "Select an Image", "", "Images (*.png *.jpg *.bmp)", options=options)
        if self.image_path:
            print(f"Image selected: {self.image_path}")  # Для отладки
            try:
                img = Image.open(self.image_path).convert('L').resize((self.img_size, self.img_size))
                img_array = np.array(img).flatten()  # Преобразуем изображение в одномерный массив
                img_scaled = self.scaler.transform([img_array])  # Масштабируем данные

                # Получаем вероятности для всех классов
                predicted_proba = self.clf.predict_proba(img_scaled)[0]

                # Находим индекс класса с максимальной вероятностью
                predicted_class = np.argmax(predicted_proba)

                # Отображаем класс с максимальной вероятностью
                self.result_text.setText(f"Classification: {self.classes[predicted_class]}\n"
                                         f"Probability: {predicted_proba[predicted_class]:.2f}")

                self.predicted_proba = predicted_proba  # Сохраняем вероятности для отображения графика
                self.graph_button.setEnabled(True)  # Включаем кнопку для показа графиков

            except Exception as e:
                print(f"Error loading or processing the image: {e}")
                self.result_text.setText("Error loading or processing the image.")

    def show_graph(self):
        img = Image.open(self.image_path).convert('L').resize((self.img_size, self.img_size))
        graph_window = GraphWindow(img, self.predicted_proba, self.classes)
        graph_window.exec_()

# Запуск приложения
if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MedicalImageClassifier()
    window.show()
    sys.exit(app.exec_())
