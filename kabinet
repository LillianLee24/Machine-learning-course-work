import os
from PyQt5.QtWidgets import (
    QDialog, QVBoxLayout, QLabel, QPushButton, QHBoxLayout, QLineEdit, QFileDialog
)
from PyQt5.QtGui import QPixmap, QFont
from PyQt5.QtCore import Qt


class UserDashboard(QDialog):
    def __init__(self, iin=None, parent_window=None):
        super().__init__()
        self.iin = iin  # Сохраняем ИИН
        self.parent_window = parent_window  # Сохраняем ссылку на главное окно

        # Остальной код инициализации окна


        self.setWindowTitle("Personal Dashboard")
        self.setGeometry(200, 100, 900, 700)
        self.setStyleSheet("background-color: #f0f8ff;")

        self.default_pic = "default_profile.png"  # Default profile picture
        self.saved_pic_path = "saved_profile.png"  # Path to save the user's profile picture

        # Load saved profile picture if it exists
        if os.path.exists(self.saved_pic_path):
            self.default_pic = self.saved_pic_path

        self.layout = QVBoxLayout()

        # Header
        self.title_label = QLabel("Personal Dashboard")
        self.title_label.setAlignment(Qt.AlignCenter)
        self.title_label.setFont(QFont("Arial", 26, QFont.Bold))
        self.title_label.setStyleSheet("color: #4b0082; margin: 20px 0;")
        self.layout.addWidget(self.title_label)

        # Profile Section
        self.profile_layout = QHBoxLayout()

        # Profile Picture
        self.profile_pic = QLabel()
        self.profile_pic.setPixmap(QPixmap(self.default_pic).scaled(150, 150, Qt.KeepAspectRatio, Qt.SmoothTransformation))
        self.profile_pic.setAlignment(Qt.AlignCenter)
        self.profile_pic.setStyleSheet(
            "border: 2px solid #4b0082; border-radius: 75px; margin: 10px; background-color: #ffffff;"
        )
        self.profile_layout.addWidget(self.profile_pic)

        # Profile Info
        self.info_layout = QVBoxLayout()

        self.name_label = QLabel("Name: Not Set")
        self.name_label.setFont(QFont("Arial", 18, QFont.Bold))
        self.name_label.setStyleSheet("color: #333333; margin: 5px 0;")
        self.info_layout.addWidget(self.name_label)

        self.email_label = QLabel("Email: Not Set")
        self.email_label.setFont(QFont("Arial", 16))
        self.email_label.setStyleSheet("color: #555555; margin: 5px 0;")
        self.info_layout.addWidget(self.email_label)

        self.edit_button = QPushButton("Edit Profile")
        self.edit_button.setStyleSheet(
            "font-size: 16px; padding: 10px; background-color: #4b0082; color: white; border-radius: 5px;"
        )
        self.edit_button.clicked.connect(self.open_edit_profile)
        self.info_layout.addWidget(self.edit_button)

        self.profile_layout.addLayout(self.info_layout)
        self.layout.addLayout(self.profile_layout)

        # Buttons Section
        self.buttons_layout = QHBoxLayout()
        self.back_button = QPushButton("← Назад")
        self.back_button.setStyleSheet("font-size: 14px; color: blue; background: none; border: none;")
        self.back_button.clicked.connect(self.go_back)
        self.layout.addWidget(self.back_button, alignment=Qt.AlignLeft)


        self.logout_button = QPushButton("Log Out")
        self.logout_button.setStyleSheet(
            "font-size: 16px; padding: 10px; background-color: #ff4500; color: white; border-radius: 5px;"
        )
        self.logout_button.clicked.connect(self.logout)
        self.buttons_layout.addWidget(self.logout_button)

        self.layout.addLayout(self.buttons_layout)
        self.setLayout(self.layout)

    def open_edit_profile(self):
        """Open profile editing dialog."""
        self.edit_profile_dialog = EditProfileDialog(self)
        self.edit_profile_dialog.exec_()

        # Update profile information and picture
        if os.path.exists(self.saved_pic_path):
            self.profile_pic.setPixmap(
                QPixmap(self.saved_pic_path).scaled(150, 150, Qt.KeepAspectRatio, Qt.SmoothTransformation)
            )
    def go_back(self):
        """Закрыть текущее окно и вернуться в главное окно."""
        self.close()
        self.parent_window.show()


    def logout(self):
        print("User logged out.")
        self.close()


class EditProfileDialog(QDialog):
    def __init__(self, parent):
        super().__init__(parent)

        self.parent = parent
        self.setWindowTitle("Edit Profile")
        self.setGeometry(300, 200, 500, 400)
        self.setStyleSheet("background-color: #f8f9fa; border-radius: 10px;")

        self.layout = QVBoxLayout()

        # Profile Picture Upload
        self.profile_pic = QLabel()
        self.profile_pic.setPixmap(
            QPixmap(parent.default_pic).scaled(150, 150, Qt.KeepAspectRatio, Qt.SmoothTransformation)
        )
        self.profile_pic.setAlignment(Qt.AlignCenter)
        self.profile_pic.setStyleSheet(
            "border: 2px solid #4b0082; border-radius: 75px; margin: 10px; background-color: #ffffff;"
        )
        self.layout.addWidget(self.profile_pic)

        self.upload_pic_button = QPushButton("Change Photo")
        self.upload_pic_button.setStyleSheet(
            "font-size: 14px; background-color: #4b0082; color: white; border-radius: 5px; padding: 5px;"
        )
        self.upload_pic_button.clicked.connect(self.upload_photo)
        self.layout.addWidget(self.upload_pic_button)

        # Name Field
        self.name_label = QLabel("Name:")
        self.name_label.setFont(QFont("Arial", 14))
        self.layout.addWidget(self.name_label)

        self.name_input = QLineEdit()
        self.name_input.setPlaceholderText("Enter your name")
        self.name_input.setStyleSheet("padding: 10px; font-size: 14px; border: 1px solid #ccc; border-radius: 5px;")
        self.layout.addWidget(self.name_input)

        # Email Field
        self.email_label = QLabel("Email:")
        self.email_label.setFont(QFont("Arial", 14))
        self.layout.addWidget(self.email_label)

        self.email_input = QLineEdit()
        self.email_input.setPlaceholderText("Enter your email")
        self.email_input.setStyleSheet("padding: 10px; font-size: 14px; border: 1px solid #ccc; border-radius: 5px;")
        self.layout.addWidget(self.email_input)

        # Save/Cancel Buttons
        self.buttons_layout = QHBoxLayout()

        self.save_button = QPushButton("Save")
        self.save_button.setStyleSheet(
            "font-size: 16px; padding: 10px; background-color: #4CAF50; color: white; border-radius: 5px;"
        )
        self.save_button.clicked.connect(self.save_changes)
        self.buttons_layout.addWidget(self.save_button)

        self.cancel_button = QPushButton("Cancel")
        self.cancel_button.setStyleSheet(
            "font-size: 16px; padding: 10px; background-color: #f44336; color: white; border-radius: 5px;"
        )
        self.cancel_button.clicked.connect(self.close)
        self.buttons_layout.addWidget(self.cancel_button)

        self.layout.addLayout(self.buttons_layout)
        self.setLayout(self.layout)

    def upload_photo(self):
        """Upload profile picture and save locally."""
        file_path, _ = QFileDialog.getOpenFileName(self, "Select Profile Picture", "", "Images (*.png *.jpg *.jpeg)")
        if file_path:
            self.parent.saved_pic_path = "saved_profile.png"  # Save the picture locally
            pixmap = QPixmap(file_path).scaled(150, 150, Qt.KeepAspectRatio, Qt.SmoothTransformation)
            pixmap.save(self.parent.saved_pic_path)  # Save to file
            self.profile_pic.setPixmap(pixmap)

    def save_changes(self):
        """Save changes to profile."""
        name = self.name_input.text().strip()
        email = self.email_input.text().strip()

        if name:
            self.parent.name_label.setText(f"Name: {name}")
        else:
            self.parent.name_label.setText("Name: Not Set")

        if email:
            self.parent.email_label.setText(f"Email: {email}")
        else:
            self.parent.email_label.setText("Email: Not Set")

        self.close()


# Example Usage
if __name__ == "__main__":
    from PyQt5.QtWidgets import QApplication
    import sys

    app = QApplication(sys.argv)
    dashboard = UserDashboard()
    dashboard.exec_()
